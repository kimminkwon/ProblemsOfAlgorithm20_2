Problem)

트럭 여러 대가 강을 가로지르는 일 차선 다리를 정해진 순으로 건너려 합니다.
모든 트럭이 다리를 건너려면 최소 몇 초가 걸리는지 알아내야 합니다.
트럭은 1초에 1만큼 움직이며, 다리 길이는 bridge_length이고 다리는 무게 weight까지 견딥니다.
※ 트럭이 다리에 완전히 오르지 않은 경우, 이 트럭의 무게는 고려하지 않습니다.

예를 들어, 길이가 2이고 10kg 무게를 견디는 다리가 있습니다.
무게가 [7, 4, 5, 6]kg인 트럭이 순서대로 최단 시간 안에 다리를 건너려면 다음과 같이 건너야 합니다.

0	    []	        []	    [7,4,5,6]
1~2	    []	        [7]	    [4,5,6]
3	    [7]	        [4]	    [5,6]
4	    [7]	        [4,5]	[6]
5	    [7,4]	    [5]	    [6]
6~7 	[7,4,5]	    [6]	    []
8	    [7,4,5,6]   []	    []

Solve 1) 해당 풀이는 틀림!

[7, 4, 5, 6]의 경우,

1) 7을 다리위로 올린다.
이때, 다음 트럭이 올라오면 11로 10kg를 초과한다. 먼저 7이 건넌다.
= 2초를 소비;

2) 4를 다리위로 올린다.
이때, 다음 트럭이 올라와도 9로 10을 초과하지 않는다. 5도 같이 건넌다.
이때, 6이 올라오면 15로 10을 초과한다. 해당 [4, 5] 묶음이 건넌다.

즉, 주어진 무게 w를 넘지 않는 선에서 배열에 i번째 원소에서
IF: 다음 원소와의 합이 w를 넘지 않는가?
    TRUE: 다음 차례는 1초만 걸린다.
    FALSE: 다음 차례는 온전히 다리를 건너는 시간을 요구한다.

7이 건널 수 있음 -> 2초
4, 5가 건널 수 있음 -> 2초, 다음 차례는 1초만 걸린다.
5가 건널 수 있음 -> 5가 이전 묶음에 속하므로 1초
6이 건널 수 있음 -> 2초
= 7초이고, +1을 해주면 8초

[7, 4, 3, 2, 5]라면,
7이 건널 수 있음          -> 2초
4, 3, 2가 건널 수 있음    -> 4가 이전 묶음에 속하지 않았으므로 2초
3, 2, 5가 건널 수 있음    -> 3이 이전 묶음에 속했으므로 1초
2, 5가 건널 수 있음       -> 2가 이전 묶음에 속했으므로 1초
5가 건널 수 있음          -> 5가 이전 묶음에 속했으므로 1초
= 7초이고 +1을 해주면 8초

l = 100, w = 100
[10,10,10,10,10,10,10,10,10,10]라면,

10,10,10,10,10,10,10,10,10,10이 건널 수 있음 -> 100초
10,10,10,10,10,10,10,10,10이 건널 수 있음 -> 1초, 이전 묶음에 속하니까
10,10,10,10,10,10,10,10이 건널 수 있음 -> 1초, 이전 묶음에 속하니까
10,10,10,10,10,10,10이 건널 수 있음 -> 1초, 이전 묶음에 속하니까
10,10,10,10,10,10이 건널 수 있음 -> 1초, 이전 묶음에 속하니까
10,10,10,10,10이 건널 수 있음 -> 1초, 이전 묶음에 속하니까
10,10,10,10이 건널 수 있음 -> 1초, 이전 묶음에 속하니까
10,10,10이 건널 수 있음 -> 1초, 이전 묶음에 속하니까
10,10이 건널 수 있음 -> 1초, 이전 묶음에 속하니까
10이 건널 수 있음 -> 1초, 이전 묶음에 속하니까
= 109초이고, +1을 해주면 101초

l = 100, w = 100
[10]라면,

10이 건널 수 있음 -> 100초
= 101초

Solve 2) Queue를 도착 - 다리위 - 대기 3개 사용하여 푸는 방법

IF: 다리Q가 비어있다.
    THEN:
    트럭이 무조건 진입할 수 있으므로 큐에 더해준다.
    다리위 트럭의 무게를 더해준다.
    시간을 1 더해준다.

ELSE IF: 다리 Q가 꽉 차있다.
    THEN:
    가장 먼저 진입한 트럭이 끝에 있으니까 트럭을 빼준다.
    빠진 트럭의 무게를 빼준다.

ELSE: 트럭이 다리위에 있으나 다리 Q가 꽉차지는 않았다.
    IF: 새로 진입할 트럭이 들어갈 수 있는 무게가 되는가?
        THEN:
        새 트럭을 진입시킨다.
        시간을 1 더해준다.
    ELSE:
        THEN:
        공백 데이터를 넣어 다리를 한칸 밀어준다.
        시간을 1 더해준다.

