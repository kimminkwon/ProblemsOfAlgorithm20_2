가장긴바이토닉부분수열_11054

LIS(Longest increasing SubSequence)

{1 5 2 1 4 3 4 5 2 1}이 배열이 저장되어있을 떄,
1 - 2 - 3 - 4 - 5 - 2 - 1과 같이 
CASE 1) 증가만 하거나
CASE 2) 감소만 하거나
CASE 3) 증가하다가 감소하거나
셋 중 하나를 찾는 것이다.
일단, 1과 2는 LIS를 통해서 구할 수 있을 것이다.

[ Dynamic Programming으로 이중 Loop를 이용하여 구현한다면? ]
어떤 특정한 위치 i에서, dp[i] = i번째 값을 마지막 값으로 가질 때 최대 증가 수열 길이

1) 처음에는 아무것도 없으니 첫 값을 추가한다.
증가dp[1] = 1;
감소dp[1] = 1;
증감dp[1] = 1;

2) 5를 기준으로
증가dp[2] = 1;
감소dp[2] = 1;
증감dp[2] = 1;

CASE 1) 증가
	증가dp[2] < 증가dp[1] + 1이고, arr[2] > arr[1]이다.
	그러므로 증가dp[2] = 2;
CASE 2) 감소
	arr[2] > arr[1]이므로 감소는 불가능하다.
	그러므로 감소dp[2] = 1;
CASE 3) 증감
	arr[2] > arr[1]이고, 증감dp[2] < 증감dp[1] + 1이다.
	그러므로 증감dp[2] = 2;
	
3) 2를 기준으로
증가dp[3] = 1;
감소dp[3] = 1;
증감dp[3] = 1;

j = 1; 1
CASE 1) 증가
	증가dp[3] < 증가dp[1] + 1이고, arr[3] > arr[1]이다.
	그러므로 증가dp[3] = 2;
CASE 2) 감소
	arr[3] > arr[1]이므로 감소는 불가능하다.
	그러므로 감소dp[3] = 1;
CASE 3) 증감
	arr[3] > arr[1]이고, 증감dp[3] < 증감dp[1] + 1이다.
	그러므로 증감dp[3] = 2;
	
j = 2; 5
CASE 1) 증가
	arr[3] < arr[2]이다. 증가가 불가능하다.
	그러므로 증가dp[3] = 2로 변하지 않는다.
CASE 2) 감소
	arr[3] > arr[2]이고 감소dp[3] < 감소dp[2] + 1이다.
	그러므로 감소dp[3] = 2;
CASE 3) 증감
	arr[3] > arr[2]이므로 지금부터 감소하는 방향으로 갈 수 있다. 증감dp[3] < 증감dp[2] + 1이다.
	그러므로 증감dp[3] = -3;
	
		
	
