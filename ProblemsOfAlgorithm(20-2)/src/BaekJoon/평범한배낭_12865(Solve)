평범한배낭_12865(Solve)

최대 무게: 7
물건 1: 6 13
물건 2: 4 8
물건 3: 3 6
물건 4: 5 12

이 때, 최대 무게와 i번째 물건을 기준으로 동적 프로그래밍을 들어간다.
dp[i][k] = 최대 무게가  k이고, 물건이 i번째까지 존재할 때 가장 최적인 가치

1) i번째 물체의 무게를 포함할 수 없는 경우, i-1번째 물체까지일때 같은 무게와 다를게 없다.
dp[i][k] = dp[i - 1][k]
2) i번째 물체의 무게를 포함할 수 있는 경우,
	2-1) i-1번째 물체까지일때 같은 무게가 효율적이거나,
	2-2) 현재 무게에서 i번쨰 물체의 무게를 뺀 뒤, i-1번째에서 해당 무게일 때의 최적값에 더한 값이 효율적이다.
	
즉 dp 배열은 다음과 같다.

	0  1  2  3  4  5  6  7  
0	0  0  0  0  0  0  0  0 
1	0
2	0
3	0
4	0


1) 물건 1까지 포함했을 경우, 행1
최대 무게: 1 to 7
물건 1: 6 13

	0  1  2  3  4  5  6  7  
0	0  0  0  0  0  0  0  0 
1	0  0  0  0  0  0  13 13
2	0
3	0
4	0

2) 물건 2까지 포함했을 경우, 행2
최대 무게: 1 to 7
물건 1: 6 13
물건 2: 4 8

	0  1  2  3  4  5  6  7  
0	0  0  0  0  0  0  0  0 
1	0  0  0  0  0  0  13 13
2	0  0  0  0  8  8  13 13 
3	0  
4	0

3) 물건 3까지 포함했을 경우, 행3
최대 무게: 1 to 7
물건 1: 6 13
물건 2: 4 8
물건 3: 3 6

	0  1  2  3  4  5  6  7  
0	0  0  0  0  0  0  0  0 
1	0  0  0  0  0  0  13 13
2	0  0  0  0  8  8  13 13
3	0  0  0  6  8  8  13 14
4	0

물음표 파트를 보자,
i번째 물체인 3 6을 포함할 수 있다. 무게가 7이니까
그렇다면 7에서 3을 뺀 4가 무게일 때, i-1번째까지의 최적 값 8에 더해주면된다.
8 + 6 = 14;


